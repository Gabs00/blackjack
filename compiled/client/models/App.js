// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var dealer, deck, dscore, player, pscore;
      this.set('deck', deck = new Deck());
      this.set('playerHand', player = deck.dealPlayer());
      this.set('dealerHand', dealer = deck.dealDealer());
      this.set('dealerScore', (dscore = dealer.scoreRequest() === 21) ? 'blackjack' : dscore);
      this.set('playerScore', (pscore = player.scoreRequest() === 21) ? 'blackjack' : pscore);
      if (pscore === 21) {
        this.checkState();
      }
      if (dscore === 21) {
        this.checkState();
      }
      player.on('score', (function(_this) {
        return function(score, length, hand) {
          var state;
          state = _this.checkScore(score, length, player);
          _this.set('playerScore', score[0]);
          if (state === 'bust') {
            return _this.checkState();
          } else if (state === 'stay') {
            dealer.at(0).flip();
            return _this.dealerLogic(dealer);
          }
        };
      })(this), this);
      player.on('stand', (function(_this) {
        return function() {
          dealer.at(0).flip();
          _this.dealerLogic(dealer);
          return _this.disable();
        };
      })(this), this);
      dealer.on('score', (function(_this) {
        return function(score, length, hand) {
          var state;
          state = _this.checkScore(score, length, dealer);
          _this.set('dealerScore', score[0]);
          if (_this.dealerLogic(dealer) === false) {
            return _this.checkState();
          }
        };
      })(this), this);
      return this.on('change:gameState', this.alertState, this);
    };

    App.prototype.disableHit = function() {
      return this.disable('hit');
    };

    App.prototype.disable = function(button) {
      button || (button = 'all');
      return this.trigger('disable', button);
    };

    App.prototype.alertState = function() {
      return this.trigger('state', this.get('gameState'));
    };

    App.prototype.checkScore = function(score, length, hand) {
      if (score[0] >= 21) {
        this.disable();
        if (score[0] > 21) {
          return 'bust';
        } else {
          if (length === 2) {
            return 'blackjack';
          } else {
            return 'stay';
          }
        }
      } else {
        return 'continue';
      }
    };

    App.prototype.dealerLogic = function(hand) {
      var score;
      score = this.get('dealerScore');
      if (score < 17) {
        hand.hit();
        return true;
      } else {
        return false;
      }
    };

    App.prototype.checkState = function() {
      var dealer, player, state;
      player = this.get('playerScore');
      dealer = this.get('dealerScore');
      state = (function() {
        switch (false) {
          case !(player > 21):
            return 'Player Bust';
          case !(dealer > 21):
            return 'Dealer Bust';
          case dealer !== player:
            return 'Push';
          case !(dealer > player):
            return 'Dealer Win';
          case !(player > dealer):
            return 'Player Win';
          case player !== 'blackjack':
            return 'Player Blackjack';
          case dealer !== 'blackjack':
            return 'Dealer Blackjack';
        }
      })();
      return this.set('gameState', state);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
