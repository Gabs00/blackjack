// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck, player;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.set('gameState', 'Player Turn');
      player = this.get('playerHand');
      player.on('score', (function(_this) {
        return function(score, length, hand) {
          var state;
          return state = _this.checkScore(score, length, player);
        };
      })(this), this);
      player.on('stand', (function(_this) {
        return function() {
          return _this.disable();
        };
      })(this), this);
      return this.on('change:gameState', this.alertState, this);
    };

    App.prototype.disableHit = function() {
      return this.disable('hit');
    };

    App.prototype.disable = function(button) {
      button || (button = 'all');
      return this.trigger('disable', button);
    };

    App.prototype.alertState = function() {
      return this.trigger('state', this.get('gameState'));
    };

    App.prototype.checkScore = function(score, length, hand) {
      if (score[0] >= 21) {
        this.disable();
        if (score[0] > 21) {
          return 'bust';
        } else {
          if (length === 2) {
            return 'blackjack';
          } else {
            return 'win';
          }
        }
      } else {
        return 'continue';
      }
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
